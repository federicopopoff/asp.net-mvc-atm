@using Newtonsoft.Json;
@model IEnumerable<AutomatedTellerMachine.Models.Transaction>

@{
    ViewBag.Title = "Konto väljavõte";
}

<h2>Konto väljavõte</h2>

<table class="table table-striped table-bordered">
    <thead>
        <tr>
            <td><strong>Tehingu id</strong></td>
            <td><strong>Summa</strong></td>
        </tr>
    </thead>
    <tbody data-bind="foreach:currentTransactions">
        <tr>
            <td data-bind="text:Id"></td>
            <td data-bind="text:formattedPrice(Amount)"></td>
        </tr>
    </tbody>
    <tfoot>
        <tr>
            <td colspan="2">
                <span data-bind="click:previousPage, visible:currentPage() > 1" class="glyphicon glyphicon-circle-arrow-left" style="cursor:pointer;"></span>
                <span data-bind="text:currentPage"></span>
                <span data-bind="click:nextPage, visible: currentPage() < lastPage" class="glyphicon glyphicon-circle-arrow-right" style="cursor:pointer;"></span>
            </td>
        </tr>
    </tfoot>
</table>

<script src="~/Scripts/knockout-3.4.0.js"></script>
<script>
    function formattedPrice(amount) {
        var price = amount.toFixed(2);
        return price;
    };

    function StatementViewModel() {
        var self = this;

        // Mudeli omadused
        self.transactions = @Html.Raw(JsonConvert.SerializeObject(Model, new JsonSerializerSettings{ ReferenceLoopHandling = ReferenceLoopHandling.Ignore}));
        self.pageSize = 5;
        self.currentPage = ko.observable(1);
        self.lastPage = Math.ceil(self.transactions.length / self.pageSize);
        self.currentTransactions = ko.computed(function () {
            var startIndex = (self.currentPage() - 1) * self.pageSize;
            var endIndex = startIndex + self.pageSize;
            return self.transactions.slice(startIndex, endIndex);
        });


        // Meetodid
        self.nextPage = function () {
            self.currentPage(self.currentPage() + 1);
        };

        self.previousPage = function(){
            self.currentPage(self.currentPage() - 1);
        };

    };
    ko.applyBindings(new StatementViewModel());
</script>
